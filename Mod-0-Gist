##Sarah Lehnhart
Mod 0 Gist - [Sarah Lehnhart] 
She/Her - 2401

About Me 
I am a hardworking, determined individual who is not frightened of a challenge. I am enthusiastic about my work and know how to get the task done.
I would define myself as an open and honest person that does not believe in misleading others and strives for fairness in whatever I do.

Data Types (Check for Understanding) 
-How confident do you feel with the content on Data Types so far? 
I feel like I'm getting a good grasp of assigning, reassigning variables with different data types 
-Is there any additional learning you need or want to do before moving to the next lesson? 
No nothing additional with my current understanding of the data types. 
-What questions do you have about Data Types? 
Why not always use the string data type if it can represent both numbers and boolean? 

Arrays (Check for Understanding) 
-How confident do you feel with the content on Arrays so far? 
Very confident on the syntax, index position, and being able to describe a line of code with an array. 
-Is there any additional learning you need or want to do before moving to the next lesson? 
Just getting to know more array methods 
-What questions do you have about Arrays? 
Can you quickly assign each element in an array all as different variables? 

Asking Technical Questions (Check for Understanding) 
-What are the steps you will take when asking a technical question? 
The 4 steps I will take when asking a question is 
1. What were you trying to do? 2. What were you expecting to happen? 3. What resulted instead? 4. What have you attempted so far?
-We lay out these steps in a particular order. What do you think the reasoning behind this might be? 
Understanding what you're trying to accomplish is the first step. 
Then realizing what parts you're failling will help others not go through the same mistakes as well as catching up on all the work you've done already. 
-How will you refer back to this question-asking strategy while in Mods 1 and beyond?
Writing the steps in my notes and referring back to them frequently 

Git Workflow (Check for Understanding) 
-How confident do you feel in your understanding and fluency with the Git workflow? 
Going through the practice exercises, I was able to recall most of the commands and predict most outputs. 
-What do you still need to practice or learn? How will you do that? 
I'll still have to learn how to go to previous iterations of git and just practicing all newly learned commands. Going back through my notes 
-What part of the Git Workflow is still confusing for you? 
All the commands make sense so not much else is confusing to me. 

Github (Check for Understanding) 
-How confident do you feel in your understanding and fluency with Github? 
Confident in my understanding of forking, cloning, and overall github workflow 
-What do you still need to practice or learn? How will you do that? 
Making sure to not run into common issues in the future. Taking it slow and reading all ther terminal 
-What part of Github is still confusing to you? 
Not much else is confusing to me. 

DTR Prep
How would you describe your preferred working style? (Alone,in groups, etc.)
Combining autonomous work with teamwork is my favorite working style. I appreciate the independence that comes with working alone,
but I also appreciate the creativity and problem-solving that come from collaboration.

What strengths do you bring to a team?
I am a good communicator, problem solver, and adapter in a group environment. I can listen to others' viewpoints and convey ideas clearly,
which promotes a cooperative and upbeat atmosphere. Along with my ability to analyze complicated problems and come up with innovative solutions,
I also have the flexibility to adjust to shifting priorities or project requirements.

What’s gone well or poorly in your previous group project settings? What can you do to either ensure those best practices carry over into projects here or to avoid common
pitfalls that might come up?
In past collaborative initiatives, communication was critical to success. Clear and consistent communication ensures that everyone is on the same page
and tasks are accomplished efficiently. Furthermore, establishing clear goals and expectations from the start helps keep the project on track.


How do you prefer to handle disagreements that come up? (Yes, they will come up!)
Disagreements are unavoidable in any team environment, but I believe they may be useful when handled properly. I prefer to approach arguments with an open mind,
carefully listening to others' perspectives and looking for common ground. I'm willing to compromise when required, but I also stand up for my own views and opinions when
I believe they're correct.


How do you communicate best? What tools do you need to communicate well with your teammates?
I communicate most effectively when I use both written and vocal communication. Email, chat platforms, and video conversations are all successful avenues of communication for me.
Regular check-ins or meetings with coworkers also help to ensure that everyone is up to date and on the same page about project goals and progress.


How do you prefer to receive feedback? How do you prefer to give feedback?
I prefer to hear feedback in a positive and specific manner. I value honest feedback that allows me to find areas for development and advance professionally. 
Similarly, while providing feedback, I aim to be constructive and encouraging, emphasizing specific actions or habits rather than personal judgment.


What scheduling constraints do you have? What are your preferred work times outside of normal school hours?
In terms of schedule, I prefer to work during regular business hours, but I am also adaptable and can work occasional late or weekend shifts if necessary. Clear communication and forward
preparation can help to reduce schedule disputes and accommodate everyone's desired work hours.

conditionals

1.	Comparison Operators: seem to understand them quite well, as I've used them effectively in my code challenges.
I feel confident in my understanding and application of these operators.
2.	Logical Operators: Similarly, I have utilized logical operators effectively in my code. I feel comfortable with them.
3.	If Statements: Based on your code challenges and explanations, I seem to have a good grasp of how to use if statements to control the flow of your program.
4.	Time Spent:  based on the complexity of the challenges, spending around 30 minutes to an hour seems reasonable 
5.	Areas for Improvement: It's always good to keep practicing and reinforcing your understanding. 
I could explore more complex scenarios with conditional statements and operators. I might also consider looking into other control flow structures like loops.
6. 2.	Getting Answers to Questions: So far none but If I have any lingering questions or concepts I'd like to explore further, I can always ask my instructor or search for resources online. 
There are plenty of tutorials, documentation, and forums where I can find explanations and examples.


Functions 

•	Reflect on your learning and work today. What are you most proud of?
Today, I'm proud of how we solved numerous coding issues and studied different elements of JavaScript, from basic grammar to effective use of built-in methods.
I'm particularly pleased with how we organized our code and provided detailed explanations for each solution.

•	In your own words, why are functions a powerful tool in our applications?
Functions are an effective tool in our applications because they allow us to encapsulate reusable code, making our programs more modular and easy to maintain.
By designing functions, we may split down difficult activities into smaller, more manageable portions, improving readability and reducing repetition. 
Functions also enhance code reuse and scalability because they can be called several times with varied arguments, making our code more versatile and adaptive to various contexts. 
Overall, functions help us organize and structure our code, resulting in more efficient and maintainable programs.


Calendaring 
1. Because I'm on ET, I'd like to be able to pre-teach the upcoming lesson before it is given. I want to devote two hours every morning.
2. I want to spend my evenings reviewing classes. 
3. I'd like to spend the majority of my weekend on projects.
4. An hour at the gym every day and hours on weekends to pursue my hobbies. 
5. I want to spend my weekends being productive without pushing myself to burnout.


Reflections on assignment 

This process is definitely slower than starting by writing code. Why might this be helpful,
 //even though it takes more time?
Clarifying the Problem: Pseudocoding requires me to break down the problem into smaller pieces, which might help understand what needs to be done and how to approach it.
Pseudocoding helps outline the structure of my code and organize  thoughts before I start creating actual code.
It enables you to think about the logic and flow of your program.
Identifying Edge Cases: Pseudocoding encourages to examine many scenarios and edge cases that may need to be addressed in code,
ensuring that you do not ignore critical components of the problem.
Collaboration: Pseudocode is useful as a communication tool, particularly in a collaborative environment.
It enables team members to discuss and comprehend the suggested solution prior to implementation, resulting in improved collaboration and fewer misunderstandings.
Error Reduction: By using pseudocoding, you can identify potential difficulties or logical faults in your approach early on, 
lowering the risk of errors and making debugging easier during implementation.


Some pseudocoding is more helpful when we sit down to start writing the actual code. 
//What are some characteristics of helpful pseudocode
Clear and concise: Pseudocode should be written in simple language that is easy to understand. It should express the solution's logic and steps clearly and concisely.
Structured: Pseudocode should be apparent in structure, with processes structured logically and hierarchically. 
Using indentation or bullet points can help to describe the algorithm's flow.
Comments: Including comments in pseudocode can help clarify the goal of each step and provide context for future implementation.
Modular: Breaking down the problem into smaller, more manageable tasks or subroutines makes the pseudocode easier to understand and implement.
Focused on Logic: Instead of specific syntax or implementation specifics, pseudocode should focus on the solution's logic.
It should state what has to be done, not how to do it in a certain programming language.

Beyond Mod 0 Plan

1. To practice coding, I plan to set aside 2-3 hours every workday and 4-5 hours on weekends. This will entail working on coding problems, 
completing small projects, and reviewing topics from pre-work materials.
2. To emphasize coding practice and maintain consistency, I will arrange certain time intervals on my calendar each day.
3. To maintain a healthy work-life balance and recharge, I plan to schedule frequent quality time with family and friends in the evenings and weekends.
4. To maintain a clean and organized environment for studying and working, I plan to spend one weekend day deep cleaning my living area.
5. To work from home, I will prepare a comfortable and ergonomic environment by arranging my desk, adjusting lighting, and assuring suitable equipment (e.g. chair, monitor, keyboard).
6. Commitment to Self-care: I will emphasize self-care habits like exercise, journaling, and meditation to reduce stress and maintain mental health.
In addition, I will commit to attending treatment sessions on a regular basis.
7. Schedule non-urgent appointments ahead of Mod 1 to minimize conflicts during the program. Examples include dentist visits, dog grooming, and personal errands.
8. To stay energized during study sessions, I organize my food shopping and meal preparation ahead of time to ensure nutritious snacks and meals are available.
9. To develop a supportive community before Mod 1, I plan to schedule regular Zoom calls with classmates to discuss tough ideas and code together.
This will also allow us to get to know one other better and build a sense of community.




Final Reflections

As you look back on your time in Mod 0, what are you most proud of?
Being able to master most of concept by myself even though I'm still new in the programming world

What did you learn about yourself, as a person or a student, during Mod 0?
// Having to do everything for myself helped me to grow into a more confident person

What is one thing you want to remember as you start this new journey to become a software developer at Turing?
Learn and practice and mostly know programming laungage 

Finally, share some gratitude for the people who were most supportive to you throughout this Mod 0 experience!


